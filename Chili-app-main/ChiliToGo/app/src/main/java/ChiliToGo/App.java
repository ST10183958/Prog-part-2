/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ChiliToGo;
import java.awt.Dimension;
import java.awt.Font;
import javax.swing.*;  
import java.util.Scanner;
import java.awt.event.*;  

public class IceTask4 {

    
    
    public static void main(String[] args) {
        //ShowReciept(true,22,333,199,1);
        GetUserInputs();    
    }
    
    // method that retrieves user input
    public static int GetUserInputs() {
        JFrame f;  
        f=new JFrame();
        JTextField AdultInput,ChildInput; 
        

        // Input Section for Adults //
        JLabel AdultLabel = new JLabel("Number of adults:");
        AdultLabel.setBounds(10,100, 200,30);
        AdultInput=new JTextField("");  
        AdultInput.setBounds(150,100, 200,30);
        f.add(AdultLabel);
        f.add(AdultInput);
        
        // Input Section for Children //
        JLabel ChildLabel = new JLabel("Number of Children:");
        ChildLabel.setBounds(7,150, 200,30);
        ChildInput=new JTextField("");  
        ChildInput.setBounds(150,150, 200,30);
        f.add(ChildLabel);
        f.add(ChildInput);
        
        // Comfirm order button to calculate total order //
        JButton ConfirmOrderButton=new JButton("Confirm");  
        ConfirmOrderButton.setBounds(50,200,95,30);  
        f.add(ConfirmOrderButton);
        
        // Show menu button to show all menu items //
        JButton ShowMenuButton=new JButton("Show menu");  
        ShowMenuButton.setBounds(150,200,150,30);  
        f.add(ShowMenuButton);
        
        ConfirmOrderButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e)
            {   
                // Validation to ensure input is non negative
                boolean AdultValueAccepted = false;
                boolean ChildValueAccepted = false;
                
                int AdultInputValue = Integer.valueOf(AdultInput.getText());
                int ChildInputValue = Integer.valueOf(ChildInput.getText());
                
                // If statement to determine whether both values are met //
                if (AdultInputValue < 0) {
                    AdultValueAccepted = false;
                } else {
                  AdultValueAccepted = true;  
                }
                if (ChildInputValue < 0)   {
                    ChildValueAccepted = false;
                } else {
                  ChildValueAccepted = true;  
                }
                
                // if both if conditions are met PaymentMethod is called //
                if (AdultValueAccepted == true && ChildValueAccepted == true) {
                    PaymentMethod(AdultInputValue,ChildInputValue);
                    //OrderCalculator(AdultInputValue,ChildInputValue);
                }
                
               
            }
        });
        
        // click event to show food menu //
        ShowMenuButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e)
            {
               Menu();
            }
        });

            
        f.setSize(400,500);
        f.setLayout(null);
        f.setVisible(true);
        f.setVisible(true);
        
        return 0;
    }
    
    // Method for showing menu food items //
    public static void Menu() {
        JFrame MenuScreen;  
        MenuScreen=new JFrame();
        
        
        // Ajiaco //
        JLabel AjiacoLabel = new JLabel("Ajiaco");
        AjiacoLabel.setBounds(150,10,150,30);  
        AjiacoLabel.setFont(new Font("Serif", Font.PLAIN, 25));
        MenuScreen.add(AjiacoLabel);
        // Ajiaco price //
        JLabel AjiacoPriceLabel = new JLabel("R180");
        AjiacoPriceLabel.setBounds(150,40,150,30);  
        AjiacoPriceLabel.setFont(new Font("Serif", Font.PLAIN, 25));
        MenuScreen.add(AjiacoPriceLabel);
        
        // Egusi soup //
        JLabel EgusisoupLabel = new JLabel("Egusi soup");
        EgusisoupLabel.setBounds(150,80,150,30);  
        EgusisoupLabel.setFont(new Font("Serif", Font.PLAIN, 25));
        MenuScreen.add(EgusisoupLabel);
        // Egusi soup //
        JLabel EgusisoupLabelPriceLabel = new JLabel("R150");
        EgusisoupLabelPriceLabel.setBounds(150,110,150,30);  
        EgusisoupLabelPriceLabel.setFont(new Font("Serif", Font.PLAIN, 25));
        MenuScreen.add(EgusisoupLabelPriceLabel);
        
        // Piri-piri chicken //
        JLabel PPCLabel = new JLabel("Piri-piri chicken");
        PPCLabel.setBounds(150,140,250,30);  
        PPCLabel.setFont(new Font("Serif", Font.PLAIN, 25));
        MenuScreen.add(PPCLabel);
        // Piri-piri chicken Price //
        JLabel PPCPriceLabel = new JLabel("R200");
        PPCPriceLabel.setBounds(150,170,150,30);  
        PPCPriceLabel.setFont(new Font("Serif", Font.PLAIN, 25));
        MenuScreen.add(PPCPriceLabel);
        
        // Button to close MenuScreen frame //
        JButton CloseButton=new JButton("Close");  
        CloseButton.setBounds(150,250,100,50);  
        MenuScreen.add(CloseButton);
        
        // CloseButton function to close MenuScreen //
        CloseButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e)
            {
               MenuScreen.dispose();
            }
        });
        
        MenuScreen.setSize(400,500);
        MenuScreen.setLayout(null);
        MenuScreen.setVisible(true);
        MenuScreen.setVisible(true);
    }
    
    
    // Method for payment method for customers to choose //
    //int NumAdult, int NumChild
    public static void PaymentMethod(int NumAdult, int NumChild) {
        JFrame PaymentSelectionFrame = new JFrame("Payment Selection");
         
        // Label for selection list //
        JLabel AdultLabel = new JLabel("Select form of payment");
        AdultLabel.setBounds(150,10, 200,30);
        PaymentSelectionFrame.add(AdultLabel);

        
        //create a selection list
         DefaultListModel<String> l1 = new DefaultListModel<>();
          l1.addElement("Card");  
          l1.addElement("Cash");  
          l1.addElement("Bitcoin");  
          l1.addElement("Paypal");  
          l1.addElement("CashApp");  
          JList<String> list = new JList<>(l1);  
          list.setBounds(150,50, 150,150);  
          PaymentSelectionFrame.add(list);

        
        // Button to confirm order //
        JButton ConfirmOrderButton=new JButton("Confirm Order");  
        ConfirmOrderButton.setBounds(150,220,150,30);   
        PaymentSelectionFrame.add(ConfirmOrderButton);
        
        ConfirmOrderButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e)
            {
                int SelectionValue = list.getSelectedIndex();
                OrderCalculator(SelectionValue,NumAdult,NumChild);

            }
        });
        
        //set the size of frame
        PaymentSelectionFrame.setSize(500,500);
        PaymentSelectionFrame.setLayout(null);
        PaymentSelectionFrame.setVisible(true);
        PaymentSelectionFrame.setVisible(true);
    }
    
    
    // Method to calculate order //
    public static void OrderCalculator(int PaymentVal, int NumAdult, int NumChild) {
        Scanner scanner = new Scanner(System.in);
        
        int AdultMeal = 7;
        int ChildMeal = 4;
        int TotalPrice = 0;
        int PriceForAdult = 0;   
        int PriceForChild = 0;
        int GuestSize = NumAdult+NumChild;
        boolean IsDiscount = false;
        double Discount = 0.10;
        double DiscountPrice = 0;
        
        
        
        // Calculating the price for all Adult meals //      
        for (int i = 0; i < NumAdult; i++) {
            PriceForAdult = NumAdult+AdultMeal;
        }
        // Calculating the price for all Adult meals //  
        
        
        // Calculating the price for all child meals //  
        for (int i = 0; i < NumChild; i++) {
            PriceForChild = NumChild+ChildMeal;
        }
        // Calculating the price for all child meals //

        
        // Calculating total price //
         TotalPrice = PriceForAdult + PriceForChild;
        // Calculating total price //
        
        //Calculate discount if guest size is greater than 10 /
        if(GuestSize >= 10) {
            double DiscountDifference = TotalPrice*Discount;
            DiscountPrice = TotalPrice-DiscountDifference;
            IsDiscount = true;       
        } else {
            DiscountPrice = TotalPrice;
            IsDiscount = false;
        }
        
        ShowReciept(NumChild,NumAdult,IsDiscount,GuestSize,TotalPrice,DiscountPrice,PaymentVal);
    }
   
    // Show reciept method to show final order bill //
    public static void ShowReciept(int Children, int Adults, boolean IsDiscount,int GuestSize, double TotalPrice, double DiscountPrice,int PaymentVal) {
        JFrame ReceiptFrame = new JFrame("Receipt");
        
        // Using switch statement to assign form of payment based on PaymentVal Int //
        String PaymentMethod = "none"; 
        switch (PaymentVal) {
          case 0:
            PaymentMethod = "Card";
            break;
          case 1:
            PaymentMethod = "Cash";
            break;
          case 2:
            PaymentMethod = "Bitcoin";
            break;
          case 3:
            PaymentMethod = "Paypal";
            break;
          case 4:
            PaymentMethod = "Paypal";
            break;
        }
        
        //Guest Size Label //
        JLabel GuestSizeLabel = new JLabel("Guest Size:"+String.valueOf(GuestSize));
        GuestSizeLabel.setBounds(20,10, 200,30);
        GuestSizeLabel.setFont(new Font("Arial", Font.PLAIN, 24));
        ReceiptFrame.add(GuestSizeLabel);
        
        //Number Of Children Label //
        JLabel ChildSizeLabel = new JLabel("Number of Children:"+String.valueOf(Children));
        ChildSizeLabel.setBounds(20,50, 500,30);
        ChildSizeLabel.setFont(new Font("Arial", Font.PLAIN, 24));
        ReceiptFrame.add(ChildSizeLabel);
        
        //Number of Adults Label //
        JLabel AdultSizeLabel = new JLabel("Number of adults:"+String.valueOf(Adults));
        AdultSizeLabel.setBounds(20,100, 500,30);
        AdultSizeLabel.setFont(new Font("Arial", Font.PLAIN, 24));
        ReceiptFrame.add(AdultSizeLabel);
        
        //Total Price Label //
        JLabel TotalPriceLabel = new JLabel("Total Price: R"+String.valueOf(TotalPrice));
        TotalPriceLabel.setBounds(20,150, 300,30);
        TotalPriceLabel.setFont(new Font("Arial", Font.PLAIN, 24));
        ReceiptFrame.add(TotalPriceLabel);
        
        
        //Is Discount Price Label //
        JLabel DiscountLabel = new JLabel("Discount:"+String.valueOf(IsDiscount));
        DiscountLabel.setBounds(20,200, 300,30);
        DiscountLabel.setFont(new Font("Arial", Font.PLAIN, 24));
        ReceiptFrame.add(DiscountLabel);
        
        //Final Price Label //
        JLabel FinalPriceLabel = new JLabel("Final price: R"+String.valueOf(DiscountPrice));
        FinalPriceLabel.setBounds(20,250, 300,30);
        FinalPriceLabel.setFont(new Font("Arial", Font.PLAIN, 24));
        ReceiptFrame.add(FinalPriceLabel);
        
         //Form of payment Label //
        JLabel PaymentFormLabel = new JLabel("Form of payment: "+PaymentMethod);
        PaymentFormLabel.setBounds(20,300, 500,30);
        PaymentFormLabel.setFont(new Font("Arial", Font.PLAIN, 24));
        ReceiptFrame.add(PaymentFormLabel);
        
        
        ReceiptFrame.setSize(400,500);
        ReceiptFrame.setLayout(null);
        ReceiptFrame.setVisible(true);
        ReceiptFrame.setVisible(true);
    }
    
    
}
